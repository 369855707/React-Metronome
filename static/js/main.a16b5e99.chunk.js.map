{"version":3,"sources":["logo.svg","click1.wav","click2.wav","serviceWorker.js","Metronome.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Metronome","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBpmChange","event","bpm","target","value","setState","state","playing","stopBeat","startBeat","clearInterval","timer","count","setInterval","click1","play","click2","beatOrStop","beatsPerMeasure","Audio","_this$state","react_default","a","createElement","className","type","min","max","onChange","onClick","Component","ReactDOM","render","src_Metronome_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2NCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2ICyESC,cAnFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaVQ,gBAAkB,SAAAC,GACd,IAAMC,EAAMD,EAAME,OAAOC,MACzBX,EAAKY,SAAS,CACVH,QAEAT,EAAKa,MAAMC,UACXd,EAAKe,WACLf,EAAKgB,cArBMhB,EAyBnBe,SAAW,WACPf,EAAKY,SAAS,CAAEE,SAAS,IACzBG,cAAcjB,EAAKkB,QA3BJlB,EA8BnBgB,UAAY,WACR,IAAIG,EAAQ,EACZnB,EAAKY,SAAS,CAAEE,SAAS,IACzBd,EAAKkB,MAAQE,YAAY,WACjBD,EAAQ,GAAK,EACbnB,EAAKqB,OAAOC,OAEZtB,EAAKuB,OAAOD,OAEhBH,KACA,IAAanB,EAAKa,MAAMJ,MAxCbT,EA2CnBwB,WAAa,WACT,GAAIxB,EAAKa,MAAMC,QACXd,EAAKY,SAAS,CAAEE,SAAS,IACzBG,cAAcjB,EAAKkB,WAChB,CACH,IAAIC,EAAQ,EACZnB,EAAKY,SAAS,CAAEE,SAAS,IACzBd,EAAKkB,MAAQE,YAAY,WACjBD,EAAQ,GAAK,EACbnB,EAAKqB,OAAOC,OAEZtB,EAAKuB,OAAOD,OAEhBH,KACA,IAAanB,EAAKa,MAAMJ,OAtDhCT,EAAKa,MAAQ,CACTJ,IAAK,IACLK,SAAS,EACTW,gBAAiB,EACjBP,MAAO,MAGXlB,EAAKqB,OAAS,IAAIK,MAAML,KACxBrB,EAAKuB,OAAS,IAAIG,MAAMH,KAXTvB,wEA8DV,IAAA2B,EAEoBxB,KAAKU,MAAtBC,EAFHa,EAEGb,QAASL,EAFZkB,EAEYlB,IAEjB,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,WAAMrB,EAAN,QACAmB,EAAAC,EAAAC,cAAA,SACIE,KAAK,QACLC,IAAI,KACJC,IAAI,MACJvB,MAAOF,EACP0B,SAAUhC,KAAKI,mBAEvBqB,EAAAC,EAAAC,cAAA,UAAQM,QAASjC,KAAKqB,YAAaV,EAAU,OAAS,iBA/E9CuB,aCCxBC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAAeC,SAASC,eAAe,SF0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a16b5e99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\r\nimport './Metronome.css'\r\n\r\nimport click1 from './click1.wav';\r\nimport click2 from './click2.wav';\r\n\r\nclass Metronome extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            bpm: 120,\r\n            playing: false,\r\n            beatsPerMeasure: 4,\r\n            timer: null\r\n        }\r\n\r\n        this.click1 = new Audio(click1);\r\n        this.click2 = new Audio(click2);\r\n    }\r\n\r\n    handleBpmChange = event => {\r\n        const bpm = event.target.value;\r\n        this.setState({\r\n            bpm\r\n        });\r\n        if (this.state.playing) {\r\n            this.stopBeat();\r\n            this.startBeat();\r\n        }\r\n    }\r\n\r\n    stopBeat = () => {\r\n        this.setState({ playing: false })\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    startBeat = () => {\r\n        let count = 0;\r\n        this.setState({ playing: true })\r\n        this.timer = setInterval(() => {\r\n            if (count % 4 == 0) {\r\n                this.click1.play();\r\n            } else {\r\n                this.click2.play();\r\n            }\r\n            count++;\r\n        }, (60 * 1000) / this.state.bpm);\r\n    }\r\n\r\n    beatOrStop = () => {\r\n        if (this.state.playing) {\r\n            this.setState({ playing: false })\r\n            clearInterval(this.timer);\r\n        } else {\r\n            let count = 0;\r\n            this.setState({ playing: true })\r\n            this.timer = setInterval(() => {\r\n                if (count % 4 == 0) {\r\n                    this.click1.play();\r\n                } else {\r\n                    this.click2.play();\r\n                }\r\n                count++;\r\n            }, (60 * 1000) / this.state.bpm);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { playing, bpm } = this.state;\r\n\r\n        return (\r\n            <div className=\"metronome\">\r\n                <div className=\"bpm-slider\">\r\n                    <div>{bpm} BPM</div>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"60\"\r\n                        max=\"240\"\r\n                        value={bpm}\r\n                        onChange={this.handleBpmChange} />\r\n                </div>\r\n                <button onClick={this.beatOrStop}>{playing ? 'Stop' : 'Start'}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Metronome","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Metronome from './Metronome';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}